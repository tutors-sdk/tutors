// This code is generated by OpenAI Chat GPT 4. 2025. Response to Ruslan Zhabskyi, 1 Mar. 2025.
import { json, type RequestHandler } from '@sveltejs/kit';

export const POST: RequestHandler = async ({ request }) => {
    try {
        // üîπ Parse request body
        const body = await request.json();
        console.log('üì© Received request:', body);

        const { messages, model_id, project_id } = body;

        // üîπ Ensure `messages` is a valid array
        if (!messages || !Array.isArray(messages)) {
            console.error('üö® Error: messages is missing or invalid', messages);
            return json({ error: 'Invalid request format' }, { status: 400 });
        }

        const API_URL = 'https://eu-gb.ml.cloud.ibm.com/ml/v1/text/generation?version=2023-05-29';
        const API_KEY = import.meta.env.VITE_IAM_API_KEY; // Ensure .env contains VITE_IAM_API_KEY

        console.log('IBM_API_KEY:', API_KEY ? 'Loaded' : 'Missing');

        if (!API_KEY) {
            console.error('‚ùå Error: IBM API key is missing');
            return json({ error: 'API key is missing' }, { status: 500 });
        }

        // üü¢ Step 1: Get IBM Cloud token
        console.log('üîÑ Requesting IBM token...');
        const tokenResponse = await fetch('https://iam.cloud.ibm.com/identity/token', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: `grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=${API_KEY}`
        });

        const tokenData = await tokenResponse.json();
        // console.log('üîë Token Response:', tokenData);

        if (!tokenResponse.ok || !tokenData.access_token) {
            throw new Error(`Token error: ${tokenResponse.status} - ${tokenData.error_description || 'Unknown error'}`);
        }

        const { access_token } = tokenData;
        console.log('‚úÖ IBM Token acquired.');

        // üü¢ Step 2: Convert messages array to a formatted string
        const inputText = messages.map((msg: { role: string; content: string }) => 
            `role: ${msg.role}, content: ${msg.content}`
        ).join("\n\n") + "\n\nrole: assistant, response:"

        // üü¢ Step 3: Call IBM Cloud AI API
        const requestBody = {
            input: inputText,
            parameters: {
                decoding_method: 'greedy',
                max_new_tokens: 900,
                min_new_tokens: 0,
                stop_sequences: ["role: user"],
                repetition_penalty: 1
            },
            model_id,
            project_id
        };

        console.log('üì§ Sending request to IBM API:', JSON.stringify(requestBody, null, 2));

        const response = await fetch(API_URL, {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${access_token}`
            },
            body: JSON.stringify(requestBody)
        });

        const responseData = await response.json();
        console.log('üì© IBM API Response:', responseData);

        if (!response.ok) {
            throw new Error(`IBM Cloud API error: ${response.status} - ${responseData.error || 'Unknown error'}`);
        }

        return json(responseData);
    } catch (error: any) {
        console.error('‚ùå Error:', error.message);
        return json({ error: 'Failed to fetch data', details: error.message }, { status: 500 });
    }
};
