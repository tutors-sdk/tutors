/**
 * Zod schema for validating Tutors CLI JSON output
 * Based on the Tutors data model for course generation
 *
 * This schema validates the structure of tutors.json or course.json
 * generated by the tutors CLI tool.
 */

import { z } from "zod";

/**
 * Learning object types in Tutors
 */
export const LearningObjectType = z.enum([
  "course",
  "topic",
  "unit",
  "side",
  "lab",
  "step",
  "note",
  "talk",
  "web",
  "github",
  "archive",
  "panelvideo",
  "panelnote",
  "paneltalk",
]);

/**
 * Asset schema for images, videos, PDFs, etc.
 */
export const AssetSchema = z.object({
  type: z.enum(["image", "video", "pdf", "zip", "other"]),
  path: z.string(),
  size: z.number().int().nonnegative().optional(),
});

/**
 * Learning object schema (recursive for nested structure)
 */
export const LearningObjectSchema: z.ZodType<any> = z.lazy(() =>
  z.object({
    id: z.string().min(1),
    title: z.string().min(1),
    type: LearningObjectType,
    img: z.string().optional(),
    video: z.string().optional(),
    pdf: z.string().optional(),
    contentMd: z.string().optional(),
    route: z.string().optional(),
    hide: z.boolean().optional(),
    frontMatter: z.record(z.any()).optional(),
    los: z.array(LearningObjectSchema).optional(),
  })
);

/**
 * Main course output schema
 */
export const CourseOutputSchema = z.object({
  title: z.string().min(1, "Course title must not be empty"),
  version: z.string().optional(),
  img: z.string().optional(),
  credits: z.string().optional(),
  route: z.string().optional(),
  ignorePin: z.array(z.number()).optional(),
  los: z.array(LearningObjectSchema),
  properties: z.record(z.any()).optional(),
  // Metadata fields
  generatedAt: z.string().optional(),
  generator: z.string().optional(),
  sourceDirectory: z.string().optional(),
});

export type CourseOutput = z.infer<typeof CourseOutputSchema>;
export type LearningObject = z.infer<typeof LearningObjectSchema>;
export type Asset = z.infer<typeof AssetSchema>;

