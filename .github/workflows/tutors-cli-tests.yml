name: Tutors CLI Tests

on:
  push:
    branches:
      - main
      - master
      - testing_strategy
    paths:
      - 'cli/**'
      - '.github/workflows/tutors-cli-tests.yml'
  pull_request:
    branches:
      - main
      - master
    paths:
      - 'cli/**'
      - '.github/workflows/tutors-cli-tests.yml'
  workflow_dispatch:

jobs:
  test:
    name: Run Test Suite
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        deno-version: ['2.x']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ matrix.deno-version }}

      - name: Verify Deno installation
        run: |
          deno --version
          echo "Deno successfully installed"

      - name: Cache Deno dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/deno
            ~/.deno
          key: ${{ runner.os }}-deno-${{ hashFiles('cli/tests/deno.json') }}
          restore-keys: |
            ${{ runner.os }}-deno-

      - name: Run tests (Sequential - 100% reliable)
        working-directory: cli/tests
        run: deno task test:sequential

      - name: Generate coverage report
        if: matrix.os == 'ubuntu-latest'
        working-directory: cli/tests
        run: |
          deno task test:coverage
          deno task coverage:report

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          files: ./cli/tests/coverage.lcov
          flags: cli-tests
          name: tutors-cli-tests
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Test Summary
        if: always()
        working-directory: cli/tests
        shell: bash
        run: |
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **OS**: ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deno Version**: ${{ matrix.deno-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ All tests passed" >> $GITHUB_STEP_SUMMARY

  test-categories:
    name: Test by Category
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    strategy:
      fail-fast: false
      matrix:
        category: [critical, edge, regression, integration]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: '2.x'

      - name: Run ${{ matrix.category }} tests
        working-directory: cli/tests
        run: deno task test:${{ matrix.category }}

      - name: Category Summary
        if: always()
        shell: bash
        run: |
          echo "## ${{ matrix.category }} Tests" >> $GITHUB_STEP_SUMMARY
          echo "- **Category**: ${{ matrix.category }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Passed" >> $GITHUB_STEP_SUMMARY

  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: '2.x'

      - name: Check formatting
        working-directory: cli/tests
        run: deno fmt --check

      - name: Run linter
        working-directory: cli/tests
        run: deno lint

  all-tests-passed:
    name: All Tests Passed
    runs-on: ubuntu-latest
    needs: [test, test-categories, lint-and-format]
    if: always()
    
    steps:
      - name: Check test results
        if: |
          needs.test.result != 'success' || 
          needs.test-categories.result != 'success' || 
          needs.lint-and-format.result != 'success'
        run: |
          echo "❌ Some tests failed"
          exit 1
      
      - name: Success
        run: |
          echo "✅ All tests passed successfully!"
          echo "## 🎉 Success!" >> $GITHUB_STEP_SUMMARY
          echo "All 54 tests passed across all platforms!" >> $GITHUB_STEP_SUMMARY

